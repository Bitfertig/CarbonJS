var LIB=function(r){var n={};function e(t){if(n[t])return n[t].exports;var a=n[t]={i:t,l:!1,exports:{}};return r[t].call(a.exports,a,a.exports,e),a.l=!0,a.exports}return e.m=r,e.c=n,e.d=function(r,n,t){e.o(r,n)||Object.defineProperty(r,n,{enumerable:!0,get:t})},e.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},e.t=function(r,n){if(1&n&&(r=e(r)),8&n)return r;if(4&n&&"object"==typeof r&&r&&r.__esModule)return r;var t=Object.create(null);if(e.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:r}),2&n&&"string"!=typeof r)for(var a in r)e.d(t,a,function(n){return r[n]}.bind(null,a));return t},e.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(n,"a",n),n},e.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},e.p="",e(e.s=0)}({"./src/date.js":
/*!*********************!*\
  !*** ./src/date.js ***!
  \*********************/
/*! no static exports found */function(module,exports){eval("module.exports = function date (format, timestamp) {\r\n  //  discuss at: https://locutus.io/php/date/\r\n  // original by: Carlos R. L. Rodrigues (https://www.jsfromhell.com)\r\n  // original by: gettimeofday\r\n  //    parts by: Peter-Paul Koch (https://www.quirksmode.org/js/beat.html)\r\n  // improved by: Kevin van Zonneveld (https://kvz.io)\r\n  // improved by: MeEtc (https://yass.meetcweb.com)\r\n  // improved by: Brad Touesnard\r\n  // improved by: Tim Wiel\r\n  // improved by: Bryan Elliott\r\n  // improved by: David Randall\r\n  // improved by: Theriault (https://github.com/Theriault)\r\n  // improved by: Theriault (https://github.com/Theriault)\r\n  // improved by: Brett Zamir (https://brett-zamir.me)\r\n  // improved by: Theriault (https://github.com/Theriault)\r\n  // improved by: Thomas Beaucourt (https://www.webapp.fr)\r\n  // improved by: JT\r\n  // improved by: Theriault (https://github.com/Theriault)\r\n  // improved by: RafaÅ‚ Kukawski (https://blog.kukawski.pl)\r\n  // improved by: Theriault (https://github.com/Theriault)\r\n  //    input by: Brett Zamir (https://brett-zamir.me)\r\n  //    input by: majak\r\n  //    input by: Alex\r\n  //    input by: Martin\r\n  //    input by: Alex Wilson\r\n  //    input by: Haravikk\r\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\r\n  // bugfixed by: majak\r\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\r\n  // bugfixed by: Brett Zamir (https://brett-zamir.me)\r\n  // bugfixed by: omid (https://locutus.io/php/380:380#comment_137122)\r\n  // bugfixed by: Chris (https://www.devotis.nl/)\r\n  //      note 1: Uses global: locutus to store the default timezone\r\n  //      note 1: Although the function potentially allows timezone info\r\n  //      note 1: (see notes), it currently does not set\r\n  //      note 1: per a timezone specified by date_default_timezone_set(). Implementers might use\r\n  //      note 1: $locutus.currentTimezoneOffset and\r\n  //      note 1: $locutus.currentTimezoneDST set by that function\r\n  //      note 1: in order to adjust the dates in this function\r\n  //      note 1: (or our other date functions!) accordingly\r\n  //   example 1: date('H:m:s \\\\m \\\\i\\\\s \\\\m\\\\o\\\\n\\\\t\\\\h', 1062402400)\r\n  //   returns 1: '07:09:40 m is month'\r\n  //   example 2: date('F j, Y, g:i a', 1062462400)\r\n  //   returns 2: 'September 2, 2003, 12:26 am'\r\n  //   example 3: date('Y W o', 1062462400)\r\n  //   returns 3: '2003 36 2003'\r\n  //   example 4: var $x = date('Y m d', (new Date()).getTime() / 1000)\r\n  //   example 4: $x = $x + ''\r\n  //   example 4: var $result = $x.length // 2009 01 09\r\n  //   returns 4: 10\r\n  //   example 5: date('W', 1104534000)\r\n  //   returns 5: '52'\r\n  //   example 6: date('B t', 1104534000)\r\n  //   returns 6: '999 31'\r\n  //   example 7: date('W U', 1293750000.82); // 2010-12-31\r\n  //   returns 7: '52 1293750000'\r\n  //   example 8: date('W', 1293836400); // 2011-01-01\r\n  //   returns 8: '52'\r\n  //   example 9: date('W Y-m-d', 1293974054); // 2011-01-02\r\n  //   returns 9: '52 2011-01-02'\r\n  //        test: skip-1 skip-2 skip-5\r\n\r\n  var jsdate, f\r\n  // Keep this here (works, but for code commented-out below for file size reasons)\r\n  // var tal= [];\r\n  var txtWords = [\r\n    'Sun', 'Mon', 'Tues', 'Wednes', 'Thurs', 'Fri', 'Satur',\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ]\r\n  // trailing backslash -> (dropped)\r\n  // a backslash followed by any character (including backslash) -> the character\r\n  // empty string -> empty string\r\n  var formatChr = /\\\\?(.?)/gi\r\n  var formatChrCb = function (t, s) {\r\n    return f[t] ? f[t]() : s\r\n  }\r\n  var _pad = function (n, c) {\r\n    n = String(n)\r\n    while (n.length < c) {\r\n      n = '0' + n\r\n    }\r\n    return n\r\n  }\r\n  f = {\r\n    // Day\r\n    d: function () {\r\n      // Day of month w/leading 0; 01..31\r\n      return _pad(f.j(), 2)\r\n    },\r\n    D: function () {\r\n      // Shorthand day name; Mon...Sun\r\n      return f.l()\r\n        .slice(0, 3)\r\n    },\r\n    j: function () {\r\n      // Day of month; 1..31\r\n      return jsdate.getDate()\r\n    },\r\n    l: function () {\r\n      // Full day name; Monday...Sunday\r\n      return txtWords[f.w()] + 'day'\r\n    },\r\n    N: function () {\r\n      // ISO-8601 day of week; 1[Mon]..7[Sun]\r\n      return f.w() || 7\r\n    },\r\n    S: function () {\r\n      // Ordinal suffix for day of month; st, nd, rd, th\r\n      var j = f.j()\r\n      var i = j % 10\r\n      if (i <= 3 && parseInt((j % 100) / 10, 10) === 1) {\r\n        i = 0\r\n      }\r\n      return ['st', 'nd', 'rd'][i - 1] || 'th'\r\n    },\r\n    w: function () {\r\n      // Day of week; 0[Sun]..6[Sat]\r\n      return jsdate.getDay()\r\n    },\r\n    z: function () {\r\n      // Day of year; 0..365\r\n      var a = new Date(f.Y(), f.n() - 1, f.j())\r\n      var b = new Date(f.Y(), 0, 1)\r\n      return Math.round((a - b) / 864e5)\r\n    },\r\n\r\n    // Week\r\n    W: function () {\r\n      // ISO-8601 week number\r\n      var a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3)\r\n      var b = new Date(a.getFullYear(), 0, 4)\r\n      return _pad(1 + Math.round((a - b) / 864e5 / 7), 2)\r\n    },\r\n\r\n    // Month\r\n    F: function () {\r\n      // Full month name; January...December\r\n      return txtWords[6 + f.n()]\r\n    },\r\n    m: function () {\r\n      // Month w/leading 0; 01...12\r\n      return _pad(f.n(), 2)\r\n    },\r\n    M: function () {\r\n      // Shorthand month name; Jan...Dec\r\n      return f.F()\r\n        .slice(0, 3)\r\n    },\r\n    n: function () {\r\n      // Month; 1...12\r\n      return jsdate.getMonth() + 1\r\n    },\r\n    t: function () {\r\n      // Days in month; 28...31\r\n      return (new Date(f.Y(), f.n(), 0))\r\n        .getDate()\r\n    },\r\n\r\n    // Year\r\n    L: function () {\r\n      // Is leap year?; 0 or 1\r\n      var j = f.Y()\r\n      return j % 4 === 0 & j % 100 !== 0 | j % 400 === 0\r\n    },\r\n    o: function () {\r\n      // ISO-8601 year\r\n      var n = f.n()\r\n      var W = f.W()\r\n      var Y = f.Y()\r\n      return Y + (n === 12 && W < 9 ? 1 : n === 1 && W > 9 ? -1 : 0)\r\n    },\r\n    Y: function () {\r\n      // Full year; e.g. 1980...2010\r\n      return jsdate.getFullYear()\r\n    },\r\n    y: function () {\r\n      // Last two digits of year; 00...99\r\n      return f.Y()\r\n        .toString()\r\n        .slice(-2)\r\n    },\r\n\r\n    // Time\r\n    a: function () {\r\n      // am or pm\r\n      return jsdate.getHours() > 11 ? 'pm' : 'am'\r\n    },\r\n    A: function () {\r\n      // AM or PM\r\n      return f.a()\r\n        .toUpperCase()\r\n    },\r\n    B: function () {\r\n      // Swatch Internet time; 000..999\r\n      var H = jsdate.getUTCHours() * 36e2\r\n      // Hours\r\n      var i = jsdate.getUTCMinutes() * 60\r\n      // Minutes\r\n      // Seconds\r\n      var s = jsdate.getUTCSeconds()\r\n      return _pad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3)\r\n    },\r\n    g: function () {\r\n      // 12-Hours; 1..12\r\n      return f.G() % 12 || 12\r\n    },\r\n    G: function () {\r\n      // 24-Hours; 0..23\r\n      return jsdate.getHours()\r\n    },\r\n    h: function () {\r\n      // 12-Hours w/leading 0; 01..12\r\n      return _pad(f.g(), 2)\r\n    },\r\n    H: function () {\r\n      // 24-Hours w/leading 0; 00..23\r\n      return _pad(f.G(), 2)\r\n    },\r\n    i: function () {\r\n      // Minutes w/leading 0; 00..59\r\n      return _pad(jsdate.getMinutes(), 2)\r\n    },\r\n    s: function () {\r\n      // Seconds w/leading 0; 00..59\r\n      return _pad(jsdate.getSeconds(), 2)\r\n    },\r\n    u: function () {\r\n      // Microseconds; 000000-999000\r\n      return _pad(jsdate.getMilliseconds() * 1000, 6)\r\n    },\r\n\r\n    // Timezone\r\n    e: function () {\r\n      // Timezone identifier; e.g. Atlantic/Azores, ...\r\n      // The following works, but requires inclusion of the very large\r\n      // timezone_abbreviations_list() function.\r\n      /*              return that.date_default_timezone_get();\r\n       */\r\n      var msg = 'Not supported (see source code of date() for timezone on how to add support)'\r\n      throw new Error(msg)\r\n    },\r\n    I: function () {\r\n      // DST observed?; 0 or 1\r\n      // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC.\r\n      // If they are not equal, then DST is observed.\r\n      var a = new Date(f.Y(), 0)\r\n      // Jan 1\r\n      var c = Date.UTC(f.Y(), 0)\r\n      // Jan 1 UTC\r\n      var b = new Date(f.Y(), 6)\r\n      // Jul 1\r\n      // Jul 1 UTC\r\n      var d = Date.UTC(f.Y(), 6)\r\n      return ((a - c) !== (b - d)) ? 1 : 0\r\n    },\r\n    O: function () {\r\n      // Difference to GMT in hour format; e.g. +0200\r\n      var tzo = jsdate.getTimezoneOffset()\r\n      var a = Math.abs(tzo)\r\n      return (tzo > 0 ? '-' : '+') + _pad(Math.floor(a / 60) * 100 + a % 60, 4)\r\n    },\r\n    P: function () {\r\n      // Difference to GMT w/colon; e.g. +02:00\r\n      var O = f.O()\r\n      return (O.substr(0, 3) + ':' + O.substr(3, 2))\r\n    },\r\n    T: function () {\r\n      // The following works, but requires inclusion of the very\r\n      // large timezone_abbreviations_list() function.\r\n      /*              var abbr, i, os, _default;\r\n      if (!tal.length) {\r\n        tal = that.timezone_abbreviations_list();\r\n      }\r\n      if ($locutus && $locutus.default_timezone) {\r\n        _default = $locutus.default_timezone;\r\n        for (abbr in tal) {\r\n          for (i = 0; i < tal[abbr].length; i++) {\r\n            if (tal[abbr][i].timezone_id === _default) {\r\n              return abbr.toUpperCase();\r\n            }\r\n          }\r\n        }\r\n      }\r\n      for (abbr in tal) {\r\n        for (i = 0; i < tal[abbr].length; i++) {\r\n          os = -jsdate.getTimezoneOffset() * 60;\r\n          if (tal[abbr][i].offset === os) {\r\n            return abbr.toUpperCase();\r\n          }\r\n        }\r\n      }\r\n      */\r\n      return 'UTC'\r\n    },\r\n    Z: function () {\r\n      // Timezone offset in seconds (-43200...50400)\r\n      return -jsdate.getTimezoneOffset() * 60\r\n    },\r\n\r\n    // Full Date/Time\r\n    c: function () {\r\n      // ISO-8601 date.\r\n      return 'Y-m-d\\\\TH:i:sP'.replace(formatChr, formatChrCb)\r\n    },\r\n    r: function () {\r\n      // RFC 2822\r\n      return 'D, d M Y H:i:s O'.replace(formatChr, formatChrCb)\r\n    },\r\n    U: function () {\r\n      // Seconds since UNIX epoch\r\n      return jsdate / 1000 | 0\r\n    }\r\n  }\r\n\r\n  var _date = function (format, timestamp) {\r\n    jsdate = (timestamp === undefined ? new Date() // Not provided\r\n      : (timestamp instanceof Date) ? new Date(timestamp) // JS Date()\r\n      : new Date(timestamp * 1000) // UNIX timestamp (auto-convert to int)\r\n    )\r\n    return format.replace(formatChr, formatChrCb)\r\n  }\r\n\r\n  return _date(format, timestamp)\r\n}\n\n//# sourceURL=webpack://LIB/./src/date.js?")},"./src/datebob.js":
/*!************************!*\
  !*** ./src/datebob.js ***!
  \************************/
/*! exports provided: datebob, DateBob */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"datebob\", function() { return datebob; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DateBob\", function() { return DateBob; });\n/**\r\n * DateBobJS\r\n * @author Aurelian Hermand (Bitfertig)\r\n */\r\n\r\n\r\nvar datebob_strtotime = __webpack_require__(/*! ./strtotime.js */ \"./src/strtotime.js\");\r\nvar datebob_date = __webpack_require__(/*! ./date.js */ \"./src/date.js\");\r\n\r\nclass DateBob extends Date {\r\n    constructor() {\r\n        let arg0 = arguments[0];\r\n        let date = new Date(); // default\r\n\r\n        if (typeof arg0 == 'number') {\r\n            date = new Date(arg0);\r\n        }\r\n        if (typeof arg0 == 'string') {\r\n            let str = arg0;\r\n            let now = +date / 1000;\r\n            // https://locutus.io/php/datetime/strtotime/\r\n            let time = datebob_strtotime(str, now);\r\n            date = new Date(time * 1000);\r\n        }\r\n        if (typeof arg0 == 'object' && arg0.constructor.name == 'DateBob') {\r\n            return arg0;\r\n        }\r\n\r\n        super(date);\r\n\r\n        return this;\r\n    }\r\n\r\n    modify(str) {\r\n        let current = +(this) / 1000;\r\n        // https://locutus.io/php/datetime/strtotime/\r\n        let time = datebob_strtotime(str, current);\r\n        this.setTime(time * 1000);\r\n        return this;\r\n    }\r\n\r\n    format(format) {\r\n        // https://locutus.io/php/datetime/date/\r\n        let str = datebob_date(format, +this / 1000);\r\n        return str;\r\n    }\r\n\r\n    // Usage: var datebob = DateBob.func; datebob();\r\n    static func() {\r\n        return new DateBob(...arguments);\r\n    }\r\n}\r\n\r\nconst datebob = DateBob.func;\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://LIB/./src/datebob.js?")},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: datebob, DateBob */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _datebob_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datebob.js */ "./src/datebob.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "datebob", function() { return _datebob_js__WEBPACK_IMPORTED_MODULE_0__["datebob"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DateBob", function() { return _datebob_js__WEBPACK_IMPORTED_MODULE_0__["DateBob"]; });\n\n\n\n//# sourceURL=webpack://LIB/./src/index.js?')},"./src/strtotime.js":
/*!**************************!*\
  !*** ./src/strtotime.js ***!
  \**************************/
/*! no static exports found */function(module,exports){eval("const reSpace = '[ \\\\t]+'\r\nconst reSpaceOpt = '[ \\\\t]*'\r\nconst reMeridian = '(?:([ap])\\\\.?m\\\\.?([\\\\t ]|$))'\r\nconst reHour24 = '(2[0-4]|[01]?[0-9])'\r\nconst reHour24lz = '([01][0-9]|2[0-4])'\r\nconst reHour12 = '(0?[1-9]|1[0-2])'\r\nconst reMinute = '([0-5]?[0-9])'\r\nconst reMinutelz = '([0-5][0-9])'\r\nconst reSecond = '(60|[0-5]?[0-9])'\r\nconst reSecondlz = '(60|[0-5][0-9])'\r\nconst reFrac = '(?:\\\\.([0-9]+))'\r\n\r\nconst reDayfull = 'sunday|monday|tuesday|wednesday|thursday|friday|saturday'\r\nconst reDayabbr = 'sun|mon|tue|wed|thu|fri|sat'\r\nconst reDaytext = reDayfull + '|' + reDayabbr + '|weekdays?'\r\n\r\nconst reReltextnumber = 'first|second|third|fourth|fifth|sixth|seventh|eighth?|ninth|tenth|eleventh|twelfth'\r\nconst reReltexttext = 'next|last|previous|this'\r\nconst reReltextunit = '(?:second|sec|minute|min|hour|day|fortnight|forthnight|month|year)s?|weeks|' + reDaytext\r\n\r\nconst reYear = '([0-9]{1,4})'\r\nconst reYear2 = '([0-9]{2})'\r\nconst reYear4 = '([0-9]{4})'\r\nconst reYear4withSign = '([+-]?[0-9]{4})'\r\nconst reMonth = '(1[0-2]|0?[0-9])'\r\nconst reMonthlz = '(0[0-9]|1[0-2])'\r\nconst reDay = '(?:(3[01]|[0-2]?[0-9])(?:st|nd|rd|th)?)'\r\nconst reDaylz = '(0[0-9]|[1-2][0-9]|3[01])'\r\n\r\nconst reMonthFull = 'january|february|march|april|may|june|july|august|september|october|november|december'\r\nconst reMonthAbbr = 'jan|feb|mar|apr|may|jun|jul|aug|sept?|oct|nov|dec'\r\nconst reMonthroman = 'i[vx]|vi{0,3}|xi{0,2}|i{1,3}'\r\nconst reMonthText = '(' + reMonthFull + '|' + reMonthAbbr + '|' + reMonthroman + ')'\r\n\r\nconst reTzCorrection = '((?:GMT)?([+-])' + reHour24 + ':?' + reMinute + '?)'\r\nconst reDayOfYear = '(00[1-9]|0[1-9][0-9]|[12][0-9][0-9]|3[0-5][0-9]|36[0-6])'\r\nconst reWeekOfYear = '(0[1-9]|[1-4][0-9]|5[0-3])'\r\n\r\nconst reDateNoYear = reMonthText + '[ .\\\\t-]*' + reDay + '[,.stndrh\\\\t ]*'\r\n\r\nfunction processMeridian (hour, meridian) {\r\n  meridian = meridian && meridian.toLowerCase()\r\n\r\n  switch (meridian) {\r\n    case 'a':\r\n      hour += hour === 12 ? -12 : 0\r\n      break\r\n    case 'p':\r\n      hour += hour !== 12 ? 12 : 0\r\n      break\r\n  }\r\n\r\n  return hour\r\n}\r\n\r\nfunction processYear (yearStr) {\r\n  let year = +yearStr\r\n\r\n  if (yearStr.length < 4 && year < 100) {\r\n    year += year < 70 ? 2000 : 1900\r\n  }\r\n\r\n  return year\r\n}\r\n\r\nfunction lookupMonth (monthStr) {\r\n  return {\r\n    jan: 0,\r\n    january: 0,\r\n    i: 0,\r\n    feb: 1,\r\n    february: 1,\r\n    ii: 1,\r\n    mar: 2,\r\n    march: 2,\r\n    iii: 2,\r\n    apr: 3,\r\n    april: 3,\r\n    iv: 3,\r\n    may: 4,\r\n    v: 4,\r\n    jun: 5,\r\n    june: 5,\r\n    vi: 5,\r\n    jul: 6,\r\n    july: 6,\r\n    vii: 6,\r\n    aug: 7,\r\n    august: 7,\r\n    viii: 7,\r\n    sep: 8,\r\n    sept: 8,\r\n    september: 8,\r\n    ix: 8,\r\n    oct: 9,\r\n    october: 9,\r\n    x: 9,\r\n    nov: 10,\r\n    november: 10,\r\n    xi: 10,\r\n    dec: 11,\r\n    december: 11,\r\n    xii: 11\r\n  }[monthStr.toLowerCase()]\r\n}\r\n\r\nfunction lookupWeekday (dayStr, desiredSundayNumber = 0) {\r\n  const dayNumbers = {\r\n    mon: 1,\r\n    monday: 1,\r\n    tue: 2,\r\n    tuesday: 2,\r\n    wed: 3,\r\n    wednesday: 3,\r\n    thu: 4,\r\n    thursday: 4,\r\n    fri: 5,\r\n    friday: 5,\r\n    sat: 6,\r\n    saturday: 6,\r\n    sun: 0,\r\n    sunday: 0\r\n  }\r\n\r\n  return dayNumbers[dayStr.toLowerCase()] || desiredSundayNumber\r\n}\r\n\r\nfunction lookupRelative (relText) {\r\n  const relativeNumbers = {\r\n    last: -1,\r\n    previous: -1,\r\n    this: 0,\r\n    first: 1,\r\n    next: 1,\r\n    second: 2,\r\n    third: 3,\r\n    fourth: 4,\r\n    fifth: 5,\r\n    sixth: 6,\r\n    seventh: 7,\r\n    eight: 8,\r\n    eighth: 8,\r\n    ninth: 9,\r\n    tenth: 10,\r\n    eleventh: 11,\r\n    twelfth: 12\r\n  }\r\n\r\n  const relativeBehavior = {\r\n    this: 1\r\n  }\r\n\r\n  const relTextLower = relText.toLowerCase()\r\n\r\n  return {\r\n    amount: relativeNumbers[relTextLower],\r\n    behavior: relativeBehavior[relTextLower] || 0\r\n  }\r\n}\r\n\r\nfunction processTzCorrection (tzOffset, oldValue) {\r\n  const reTzCorrectionLoose = /(?:GMT)?([+-])(\\d+)(:?)(\\d{0,2})/i\r\n  tzOffset = tzOffset && tzOffset.match(reTzCorrectionLoose)\r\n\r\n  if (!tzOffset) {\r\n    return oldValue\r\n  }\r\n\r\n  let sign = tzOffset[1] === '-' ? 1 : -1\r\n  let hours = +tzOffset[2]\r\n  let minutes = +tzOffset[4]\r\n\r\n  if (!tzOffset[4] && !tzOffset[3]) {\r\n    minutes = Math.floor(hours % 100)\r\n    hours = Math.floor(hours / 100)\r\n  }\r\n\r\n  return sign * (hours * 60 + minutes)\r\n}\r\n\r\nconst formats = {\r\n  yesterday: {\r\n    regex: /^yesterday/i,\r\n    name: 'yesterday',\r\n    callback () {\r\n      this.rd -= 1\r\n      return this.resetTime()\r\n    }\r\n  },\r\n\r\n  now: {\r\n    regex: /^now/i,\r\n    name: 'now'\r\n    // do nothing\r\n  },\r\n\r\n  noon: {\r\n    regex: /^noon/i,\r\n    name: 'noon',\r\n    callback () {\r\n      return this.resetTime() && this.time(12, 0, 0, 0)\r\n    }\r\n  },\r\n\r\n  midnightOrToday: {\r\n    regex: /^(midnight|today)/i,\r\n    name: 'midnight | today',\r\n    callback () {\r\n      return this.resetTime()\r\n    }\r\n  },\r\n\r\n  tomorrow: {\r\n    regex: /^tomorrow/i,\r\n    name: 'tomorrow',\r\n    callback () {\r\n      this.rd += 1\r\n      return this.resetTime()\r\n    }\r\n  },\r\n\r\n  timestamp: {\r\n    regex: /^@(-?\\d+)/i,\r\n    name: 'timestamp',\r\n    callback (match, timestamp) {\r\n      this.rs += +timestamp\r\n      this.y = 1970\r\n      this.m = 0\r\n      this.d = 1\r\n      this.dates = 0\r\n\r\n      return this.resetTime() && this.zone(0)\r\n    }\r\n  },\r\n\r\n  firstOrLastDay: {\r\n    regex: /^(first|last) day of/i,\r\n    name: 'firstdayof | lastdayof',\r\n    callback (match, day) {\r\n      if (day.toLowerCase() === 'first') {\r\n        this.firstOrLastDayOfMonth = 1\r\n      } else {\r\n        this.firstOrLastDayOfMonth = -1\r\n      }\r\n    }\r\n  },\r\n\r\n  backOrFrontOf: {\r\n    regex: RegExp('^(back|front) of ' + reHour24 + reSpaceOpt + reMeridian + '?', 'i'),\r\n    name: 'backof | frontof',\r\n    callback (match, side, hours, meridian) {\r\n      let back = side.toLowerCase() === 'back'\r\n      let hour = +hours\r\n      let minute = 15\r\n\r\n      if (!back) {\r\n        hour -= 1\r\n        minute = 45\r\n      }\r\n\r\n      hour = processMeridian(hour, meridian)\r\n\r\n      return this.resetTime() && this.time(hour, minute, 0, 0)\r\n    }\r\n  },\r\n\r\n  weekdayOf: {\r\n    regex: RegExp('^(' + reReltextnumber + '|' + reReltexttext + ')' + reSpace + '(' + reDayfull + '|' + reDayabbr + ')' + reSpace + 'of', 'i'),\r\n    name: 'weekdayof'\r\n    // todo\r\n  },\r\n\r\n  mssqltime: {\r\n    regex: RegExp('^' + reHour12 + ':' + reMinutelz + ':' + reSecondlz + '[:.]([0-9]+)' + reMeridian, 'i'),\r\n    name: 'mssqltime',\r\n    callback (match, hour, minute, second, frac, meridian) {\r\n      return this.time(processMeridian(+hour, meridian), +minute, +second, +frac.substr(0, 3))\r\n    }\r\n  },\r\n\r\n  timeLong12: {\r\n    regex: RegExp('^' + reHour12 + '[:.]' + reMinute + '[:.]' + reSecondlz + reSpaceOpt + reMeridian, 'i'),\r\n    name: 'timelong12',\r\n    callback (match, hour, minute, second, meridian) {\r\n      return this.time(processMeridian(+hour, meridian), +minute, +second, 0)\r\n    }\r\n  },\r\n\r\n  timeShort12: {\r\n    regex: RegExp('^' + reHour12 + '[:.]' + reMinutelz + reSpaceOpt + reMeridian, 'i'),\r\n    name: 'timeshort12',\r\n    callback (match, hour, minute, meridian) {\r\n      return this.time(processMeridian(+hour, meridian), +minute, 0, 0)\r\n    }\r\n  },\r\n\r\n  timeTiny12: {\r\n    regex: RegExp('^' + reHour12 + reSpaceOpt + reMeridian, 'i'),\r\n    name: 'timetiny12',\r\n    callback (match, hour, meridian) {\r\n      return this.time(processMeridian(+hour, meridian), 0, 0, 0)\r\n    }\r\n  },\r\n\r\n  soap: {\r\n    regex: RegExp('^' + reYear4 + '-' + reMonthlz + '-' + reDaylz + 'T' + reHour24lz + ':' + reMinutelz + ':' + reSecondlz + reFrac + reTzCorrection + '?', 'i'),\r\n    name: 'soap',\r\n    callback (match, year, month, day, hour, minute, second, frac, tzCorrection) {\r\n      return this.ymd(+year, month - 1, +day) &&\r\n              this.time(+hour, +minute, +second, +frac.substr(0, 3)) &&\r\n              this.zone(processTzCorrection(tzCorrection))\r\n    }\r\n  },\r\n\r\n  wddx: {\r\n    regex: RegExp('^' + reYear4 + '-' + reMonth + '-' + reDay + 'T' + reHour24 + ':' + reMinute + ':' + reSecond),\r\n    name: 'wddx',\r\n    callback (match, year, month, day, hour, minute, second) {\r\n      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0)\r\n    }\r\n  },\r\n\r\n  exif: {\r\n    regex: RegExp('^' + reYear4 + ':' + reMonthlz + ':' + reDaylz + ' ' + reHour24lz + ':' + reMinutelz + ':' + reSecondlz, 'i'),\r\n    name: 'exif',\r\n    callback (match, year, month, day, hour, minute, second) {\r\n      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0)\r\n    }\r\n  },\r\n\r\n  xmlRpc: {\r\n    regex: RegExp('^' + reYear4 + reMonthlz + reDaylz + 'T' + reHour24 + ':' + reMinutelz + ':' + reSecondlz),\r\n    name: 'xmlrpc',\r\n    callback (match, year, month, day, hour, minute, second) {\r\n      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0)\r\n    }\r\n  },\r\n\r\n  xmlRpcNoColon: {\r\n    regex: RegExp('^' + reYear4 + reMonthlz + reDaylz + '[Tt]' + reHour24 + reMinutelz + reSecondlz),\r\n    name: 'xmlrpcnocolon',\r\n    callback (match, year, month, day, hour, minute, second) {\r\n      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0)\r\n    }\r\n  },\r\n\r\n  clf: {\r\n    regex: RegExp('^' + reDay + '/(' + reMonthAbbr + ')/' + reYear4 + ':' + reHour24lz + ':' + reMinutelz + ':' + reSecondlz + reSpace + reTzCorrection, 'i'),\r\n    name: 'clf',\r\n    callback (match, day, month, year, hour, minute, second, tzCorrection) {\r\n      return this.ymd(+year, lookupMonth(month), +day) &&\r\n              this.time(+hour, +minute, +second, 0) &&\r\n              this.zone(processTzCorrection(tzCorrection))\r\n    }\r\n  },\r\n\r\n  iso8601long: {\r\n    regex: RegExp('^t?' + reHour24 + '[:.]' + reMinute + '[:.]' + reSecond + reFrac, 'i'),\r\n    name: 'iso8601long',\r\n    callback (match, hour, minute, second, frac) {\r\n      return this.time(+hour, +minute, +second, +frac.substr(0, 3))\r\n    }\r\n  },\r\n\r\n  dateTextual: {\r\n    regex: RegExp('^' + reMonthText + '[ .\\\\t-]*' + reDay + '[,.stndrh\\\\t ]+' + reYear, 'i'),\r\n    name: 'datetextual',\r\n    callback (match, month, day, year) {\r\n      return this.ymd(processYear(year), lookupMonth(month), +day)\r\n    }\r\n  },\r\n\r\n  pointedDate4: {\r\n    regex: RegExp('^' + reDay + '[.\\\\t-]' + reMonth + '[.-]' + reYear4),\r\n    name: 'pointeddate4',\r\n    callback (match, day, month, year) {\r\n      return this.ymd(+year, month - 1, +day)\r\n    }\r\n  },\r\n\r\n  pointedDate2: {\r\n    regex: RegExp('^' + reDay + '[.\\\\t]' + reMonth + '\\\\.' + reYear2),\r\n    name: 'pointeddate2',\r\n    callback (match, day, month, year) {\r\n      return this.ymd(processYear(year), month - 1, +day)\r\n    }\r\n  },\r\n\r\n  timeLong24: {\r\n    regex: RegExp('^t?' + reHour24 + '[:.]' + reMinute + '[:.]' + reSecond),\r\n    name: 'timelong24',\r\n    callback (match, hour, minute, second) {\r\n      return this.time(+hour, +minute, +second, 0)\r\n    }\r\n  },\r\n\r\n  dateNoColon: {\r\n    regex: RegExp('^' + reYear4 + reMonthlz + reDaylz),\r\n    name: 'datenocolon',\r\n    callback (match, year, month, day) {\r\n      return this.ymd(+year, month - 1, +day)\r\n    }\r\n  },\r\n\r\n  pgydotd: {\r\n    regex: RegExp('^' + reYear4 + '\\\\.?' + reDayOfYear),\r\n    name: 'pgydotd',\r\n    callback (match, year, day) {\r\n      return this.ymd(+year, 0, +day)\r\n    }\r\n  },\r\n\r\n  timeShort24: {\r\n    regex: RegExp('^t?' + reHour24 + '[:.]' + reMinute, 'i'),\r\n    name: 'timeshort24',\r\n    callback (match, hour, minute) {\r\n      return this.time(+hour, +minute, 0, 0)\r\n    }\r\n  },\r\n\r\n  iso8601noColon: {\r\n    regex: RegExp('^t?' + reHour24lz + reMinutelz + reSecondlz, 'i'),\r\n    name: 'iso8601nocolon',\r\n    callback (match, hour, minute, second) {\r\n      return this.time(+hour, +minute, +second, 0)\r\n    }\r\n  },\r\n\r\n  iso8601dateSlash: {\r\n    // eventhough the trailing slash is optional in PHP\r\n    // here it's mandatory and inputs without the slash\r\n    // are handled by dateslash\r\n    regex: RegExp('^' + reYear4 + '/' + reMonthlz + '/' + reDaylz + '/'),\r\n    name: 'iso8601dateslash',\r\n    callback (match, year, month, day) {\r\n      return this.ymd(+year, month - 1, +day)\r\n    }\r\n  },\r\n\r\n  dateSlash: {\r\n    regex: RegExp('^' + reYear4 + '/' + reMonth + '/' + reDay),\r\n    name: 'dateslash',\r\n    callback (match, year, month, day) {\r\n      return this.ymd(+year, month - 1, +day)\r\n    }\r\n  },\r\n\r\n  american: {\r\n    regex: RegExp('^' + reMonth + '/' + reDay + '/' + reYear),\r\n    name: 'american',\r\n    callback (match, month, day, year) {\r\n      return this.ymd(processYear(year), month - 1, +day)\r\n    }\r\n  },\r\n\r\n  americanShort: {\r\n    regex: RegExp('^' + reMonth + '/' + reDay),\r\n    name: 'americanshort',\r\n    callback (match, month, day) {\r\n      return this.ymd(this.y, month - 1, +day)\r\n    }\r\n  },\r\n\r\n  gnuDateShortOrIso8601date2: {\r\n    // iso8601date2 is complete subset of gnudateshort\r\n    regex: RegExp('^' + reYear + '-' + reMonth + '-' + reDay),\r\n    name: 'gnudateshort | iso8601date2',\r\n    callback (match, year, month, day) {\r\n      return this.ymd(processYear(year), month - 1, +day)\r\n    }\r\n  },\r\n\r\n  iso8601date4: {\r\n    regex: RegExp('^' + reYear4withSign + '-' + reMonthlz + '-' + reDaylz),\r\n    name: 'iso8601date4',\r\n    callback (match, year, month, day) {\r\n      return this.ymd(+year, month - 1, +day)\r\n    }\r\n  },\r\n\r\n  gnuNoColon: {\r\n    regex: RegExp('^t?' + reHour24lz + reMinutelz, 'i'),\r\n    name: 'gnunocolon',\r\n    callback (match, hour, minute) {\r\n      // this rule is a special case\r\n      // if time was already set once by any preceding rule, it sets the captured value as year\r\n      switch (this.times) {\r\n        case 0:\r\n          return this.time(+hour, +minute, 0, this.f)\r\n        case 1:\r\n          this.y = hour * 100 + +minute\r\n          this.times++\r\n\r\n          return true\r\n        default:\r\n          return false\r\n      }\r\n    }\r\n  },\r\n\r\n  gnuDateShorter: {\r\n    regex: RegExp('^' + reYear4 + '-' + reMonth),\r\n    name: 'gnudateshorter',\r\n    callback (match, year, month) {\r\n      return this.ymd(+year, month - 1, 1)\r\n    }\r\n  },\r\n\r\n  pgTextReverse: {\r\n    // note: allowed years are from 32-9999\r\n    // years below 32 should be treated as days in datefull\r\n    regex: RegExp('^' + '(\\\\d{3,4}|[4-9]\\\\d|3[2-9])-(' + reMonthAbbr + ')-' + reDaylz, 'i'),\r\n    name: 'pgtextreverse',\r\n    callback (match, year, month, day) {\r\n      return this.ymd(processYear(year), lookupMonth(month), +day)\r\n    }\r\n  },\r\n\r\n  dateFull: {\r\n    regex: RegExp('^' + reDay + '[ \\\\t.-]*' + reMonthText + '[ \\\\t.-]*' + reYear, 'i'),\r\n    name: 'datefull',\r\n    callback (match, day, month, year) {\r\n      return this.ymd(processYear(year), lookupMonth(month), +day)\r\n    }\r\n  },\r\n\r\n  dateNoDay: {\r\n    regex: RegExp('^' + reMonthText + '[ .\\\\t-]*' + reYear4, 'i'),\r\n    name: 'datenoday',\r\n    callback (match, month, year) {\r\n      return this.ymd(+year, lookupMonth(month), 1)\r\n    }\r\n  },\r\n\r\n  dateNoDayRev: {\r\n    regex: RegExp('^' + reYear4 + '[ .\\\\t-]*' + reMonthText, 'i'),\r\n    name: 'datenodayrev',\r\n    callback (match, year, month) {\r\n      return this.ymd(+year, lookupMonth(month), 1)\r\n    }\r\n  },\r\n\r\n  pgTextShort: {\r\n    regex: RegExp('^(' + reMonthAbbr + ')-' + reDaylz + '-' + reYear, 'i'),\r\n    name: 'pgtextshort',\r\n    callback (match, month, day, year) {\r\n      return this.ymd(processYear(year), lookupMonth(month), +day)\r\n    }\r\n  },\r\n\r\n  dateNoYear: {\r\n    regex: RegExp('^' + reDateNoYear, 'i'),\r\n    name: 'datenoyear',\r\n    callback (match, month, day) {\r\n      return this.ymd(this.y, lookupMonth(month), +day)\r\n    }\r\n  },\r\n\r\n  dateNoYearRev: {\r\n    regex: RegExp('^' + reDay + '[ .\\\\t-]*' + reMonthText, 'i'),\r\n    name: 'datenoyearrev',\r\n    callback (match, day, month) {\r\n      return this.ymd(this.y, lookupMonth(month), +day)\r\n    }\r\n  },\r\n\r\n  isoWeekDay: {\r\n    regex: RegExp('^' + reYear4 + '-?W' + reWeekOfYear + '(?:-?([0-7]))?'),\r\n    name: 'isoweekday | isoweek',\r\n    callback (match, year, week, day) {\r\n      day = day ? +day : 1\r\n\r\n      if (!this.ymd(+year, 0, 1)) {\r\n        return false\r\n      }\r\n\r\n      // get day of week for Jan 1st\r\n      let dayOfWeek = new Date(this.y, this.m, this.d).getDay()\r\n\r\n      // and use the day to figure out the offset for day 1 of week 1\r\n      dayOfWeek = 0 - (dayOfWeek > 4 ? dayOfWeek - 7 : dayOfWeek)\r\n\r\n      this.rd += dayOfWeek + ((week - 1) * 7) + day\r\n    }\r\n  },\r\n\r\n  relativeText: {\r\n    regex: RegExp('^(' + reReltextnumber + '|' + reReltexttext + ')' + reSpace + '(' + reReltextunit + ')', 'i'),\r\n    name: 'relativetext',\r\n    callback (match, relValue, relUnit) {\r\n      // todo: implement handling of 'this time-unit'\r\n      // eslint-disable-next-line no-unused-vars\r\n      const { amount, behavior } = lookupRelative(relValue)\r\n\r\n      switch (relUnit.toLowerCase()) {\r\n        case 'sec':\r\n        case 'secs':\r\n        case 'second':\r\n        case 'seconds':\r\n          this.rs += amount\r\n          break\r\n        case 'min':\r\n        case 'mins':\r\n        case 'minute':\r\n        case 'minutes':\r\n          this.ri += amount\r\n          break\r\n        case 'hour':\r\n        case 'hours':\r\n          this.rh += amount\r\n          break\r\n        case 'day':\r\n        case 'days':\r\n          this.rd += amount\r\n          break\r\n        case 'fortnight':\r\n        case 'fortnights':\r\n        case 'forthnight':\r\n        case 'forthnights':\r\n          this.rd += amount * 14\r\n          break\r\n        case 'week':\r\n        case 'weeks':\r\n          this.rd += amount * 7\r\n          break\r\n        case 'month':\r\n        case 'months':\r\n          this.rm += amount\r\n          break\r\n        case 'year':\r\n        case 'years':\r\n          this.ry += amount\r\n          break\r\n        case 'mon': case 'monday':\r\n        case 'tue': case 'tuesday':\r\n        case 'wed': case 'wednesday':\r\n        case 'thu': case 'thursday':\r\n        case 'fri': case 'friday':\r\n        case 'sat': case 'saturday':\r\n        case 'sun': case 'sunday':\r\n          this.resetTime()\r\n          this.weekday = lookupWeekday(relUnit, 7)\r\n          this.weekdayBehavior = 1\r\n          this.rd += (amount > 0 ? amount - 1 : amount) * 7\r\n          break\r\n        case 'weekday':\r\n        case 'weekdays':\r\n          // todo\r\n          break\r\n      }\r\n    }\r\n  },\r\n\r\n  relative: {\r\n    regex: RegExp('^([+-]*)[ \\\\t]*(\\\\d+)' + reSpaceOpt + '(' + reReltextunit + '|week)', 'i'),\r\n    name: 'relative',\r\n    callback (match, signs, relValue, relUnit) {\r\n      const minuses = signs.replace(/[^-]/g, '').length\r\n\r\n      let amount = +relValue * Math.pow(-1, minuses)\r\n\r\n      switch (relUnit.toLowerCase()) {\r\n        case 'sec':\r\n        case 'secs':\r\n        case 'second':\r\n        case 'seconds':\r\n          this.rs += amount\r\n          break\r\n        case 'min':\r\n        case 'mins':\r\n        case 'minute':\r\n        case 'minutes':\r\n          this.ri += amount\r\n          break\r\n        case 'hour':\r\n        case 'hours':\r\n          this.rh += amount\r\n          break\r\n        case 'day':\r\n        case 'days':\r\n          this.rd += amount\r\n          break\r\n        case 'fortnight':\r\n        case 'fortnights':\r\n        case 'forthnight':\r\n        case 'forthnights':\r\n          this.rd += amount * 14\r\n          break\r\n        case 'week':\r\n        case 'weeks':\r\n          this.rd += amount * 7\r\n          break\r\n        case 'month':\r\n        case 'months':\r\n          this.rm += amount\r\n          break\r\n        case 'year':\r\n        case 'years':\r\n          this.ry += amount\r\n          break\r\n        case 'mon': case 'monday':\r\n        case 'tue': case 'tuesday':\r\n        case 'wed': case 'wednesday':\r\n        case 'thu': case 'thursday':\r\n        case 'fri': case 'friday':\r\n        case 'sat': case 'saturday':\r\n        case 'sun': case 'sunday':\r\n          this.resetTime()\r\n          this.weekday = lookupWeekday(relUnit, 7)\r\n          this.weekdayBehavior = 1\r\n          this.rd += (amount > 0 ? amount - 1 : amount) * 7\r\n          break\r\n        case 'weekday':\r\n        case 'weekdays':\r\n          // todo\r\n          break\r\n      }\r\n    }\r\n  },\r\n\r\n  dayText: {\r\n    regex: RegExp('^(' + reDaytext + ')', 'i'),\r\n    name: 'daytext',\r\n    callback (match, dayText) {\r\n      this.resetTime()\r\n      this.weekday = lookupWeekday(dayText, 0)\r\n\r\n      if (this.weekdayBehavior !== 2) {\r\n        this.weekdayBehavior = 1\r\n      }\r\n    }\r\n  },\r\n\r\n  relativeTextWeek: {\r\n    regex: RegExp('^(' + reReltexttext + ')' + reSpace + 'week', 'i'),\r\n    name: 'relativetextweek',\r\n    callback (match, relText) {\r\n      this.weekdayBehavior = 2\r\n\r\n      switch (relText.toLowerCase()) {\r\n        case 'this':\r\n          this.rd += 0\r\n          break\r\n        case 'next':\r\n          this.rd += 7\r\n          break\r\n        case 'last':\r\n        case 'previous':\r\n          this.rd -= 7\r\n          break\r\n      }\r\n\r\n      if (isNaN(this.weekday)) {\r\n        this.weekday = 1\r\n      }\r\n    }\r\n  },\r\n\r\n  monthFullOrMonthAbbr: {\r\n    regex: RegExp('^(' + reMonthFull + '|' + reMonthAbbr + ')', 'i'),\r\n    name: 'monthfull | monthabbr',\r\n    callback (match, month) {\r\n      return this.ymd(this.y, lookupMonth(month), this.d)\r\n    }\r\n  },\r\n\r\n  tzCorrection: {\r\n    regex: RegExp('^' + reTzCorrection, 'i'),\r\n    name: 'tzcorrection',\r\n    callback (tzCorrection) {\r\n      return this.zone(processTzCorrection(tzCorrection))\r\n    }\r\n  },\r\n\r\n  ago: {\r\n    regex: /^ago/i,\r\n    name: 'ago',\r\n    callback () {\r\n      this.ry = -this.ry\r\n      this.rm = -this.rm\r\n      this.rd = -this.rd\r\n      this.rh = -this.rh\r\n      this.ri = -this.ri\r\n      this.rs = -this.rs\r\n      this.rf = -this.rf\r\n    }\r\n  },\r\n\r\n  year4: {\r\n    regex: RegExp('^' + reYear4),\r\n    name: 'year4',\r\n    callback (match, year) {\r\n      this.y = +year\r\n      return true\r\n    }\r\n  },\r\n\r\n  whitespace: {\r\n    regex: /^[ .,\\t]+/,\r\n    name: 'whitespace'\r\n    // do nothing\r\n  },\r\n\r\n  dateShortWithTimeLong: {\r\n    regex: RegExp('^' + reDateNoYear + 't?' + reHour24 + '[:.]' + reMinute + '[:.]' + reSecond, 'i'),\r\n    name: 'dateshortwithtimelong',\r\n    callback (match, month, day, hour, minute, second) {\r\n      return this.ymd(this.y, lookupMonth(month), +day) && this.time(+hour, +minute, +second, 0)\r\n    }\r\n  },\r\n\r\n  dateShortWithTimeLong12: {\r\n    regex: RegExp('^' + reDateNoYear + reHour12 + '[:.]' + reMinute + '[:.]' + reSecondlz + reSpaceOpt + reMeridian, 'i'),\r\n    name: 'dateshortwithtimelong12',\r\n    callback (match, month, day, hour, minute, second, meridian) {\r\n      return this.ymd(this.y, lookupMonth(month), +day) && this.time(processMeridian(+hour, meridian), +minute, +second, 0)\r\n    }\r\n  },\r\n\r\n  dateShortWithTimeShort: {\r\n    regex: RegExp('^' + reDateNoYear + 't?' + reHour24 + '[:.]' + reMinute, 'i'),\r\n    name: 'dateshortwithtimeshort',\r\n    callback (match, month, day, hour, minute) {\r\n      return this.ymd(this.y, lookupMonth(month), +day) && this.time(+hour, +minute, 0, 0)\r\n    }\r\n  },\r\n\r\n  dateShortWithTimeShort12: {\r\n    regex: RegExp('^' + reDateNoYear + reHour12 + '[:.]' + reMinutelz + reSpaceOpt + reMeridian, 'i'),\r\n    name: 'dateshortwithtimeshort12',\r\n    callback (match, month, day, hour, minute, meridian) {\r\n      return this.ymd(this.y, lookupMonth(month), +day) && this.time(processMeridian(+hour, meridian), +minute, 0, 0)\r\n    }\r\n  }\r\n}\r\n\r\nlet resultProto = {\r\n  // date\r\n  y: NaN,\r\n  m: NaN,\r\n  d: NaN,\r\n  // time\r\n  h: NaN,\r\n  i: NaN,\r\n  s: NaN,\r\n  f: NaN,\r\n\r\n  // relative shifts\r\n  ry: 0,\r\n  rm: 0,\r\n  rd: 0,\r\n  rh: 0,\r\n  ri: 0,\r\n  rs: 0,\r\n  rf: 0,\r\n\r\n  // weekday related shifts\r\n  weekday: NaN,\r\n  weekdayBehavior: 0,\r\n\r\n  // first or last day of month\r\n  // 0 none, 1 first, -1 last\r\n  firstOrLastDayOfMonth: 0,\r\n\r\n  // timezone correction in minutes\r\n  z: NaN,\r\n\r\n  // counters\r\n  dates: 0,\r\n  times: 0,\r\n  zones: 0,\r\n\r\n  // helper functions\r\n  ymd (y, m, d) {\r\n    if (this.dates > 0) {\r\n      return false\r\n    }\r\n\r\n    this.dates++\r\n    this.y = y\r\n    this.m = m\r\n    this.d = d\r\n    return true\r\n  },\r\n\r\n  time (h, i, s, f) {\r\n    if (this.times > 0) {\r\n      return false\r\n    }\r\n\r\n    this.times++\r\n    this.h = h\r\n    this.i = i\r\n    this.s = s\r\n    this.f = f\r\n\r\n    return true\r\n  },\r\n\r\n  resetTime () {\r\n    this.h = 0\r\n    this.i = 0\r\n    this.s = 0\r\n    this.f = 0\r\n    this.times = 0\r\n\r\n    return true\r\n  },\r\n\r\n  zone (minutes) {\r\n    if (this.zones <= 1) {\r\n      this.zones++\r\n      this.z = minutes\r\n      return true\r\n    }\r\n\r\n    return false\r\n  },\r\n\r\n  toDate (relativeTo) {\r\n    if (this.dates && !this.times) {\r\n      this.h = this.i = this.s = this.f = 0\r\n    }\r\n\r\n    // fill holes\r\n    if (isNaN(this.y)) {\r\n      this.y = relativeTo.getFullYear()\r\n    }\r\n\r\n    if (isNaN(this.m)) {\r\n      this.m = relativeTo.getMonth()\r\n    }\r\n\r\n    if (isNaN(this.d)) {\r\n      this.d = relativeTo.getDate()\r\n    }\r\n\r\n    if (isNaN(this.h)) {\r\n      this.h = relativeTo.getHours()\r\n    }\r\n\r\n    if (isNaN(this.i)) {\r\n      this.i = relativeTo.getMinutes()\r\n    }\r\n\r\n    if (isNaN(this.s)) {\r\n      this.s = relativeTo.getSeconds()\r\n    }\r\n\r\n    if (isNaN(this.f)) {\r\n      this.f = relativeTo.getMilliseconds()\r\n    }\r\n\r\n    // adjust special early\r\n    switch (this.firstOrLastDayOfMonth) {\r\n      case 1:\r\n        this.d = 1\r\n        break\r\n      case -1:\r\n        this.d = 0\r\n        this.m += 1\r\n        break\r\n    }\r\n\r\n    if (!isNaN(this.weekday)) {\r\n      var date = new Date(relativeTo.getTime())\r\n      date.setFullYear(this.y, this.m, this.d)\r\n      date.setHours(this.h, this.i, this.s, this.f)\r\n\r\n      var dow = date.getDay()\r\n\r\n      if (this.weekdayBehavior === 2) {\r\n        // To make \"this week\" work, where the current day of week is a \"sunday\"\r\n        if (dow === 0 && this.weekday !== 0) {\r\n          this.weekday = -6\r\n        }\r\n\r\n        // To make \"sunday this week\" work, where the current day of week is not a \"sunday\"\r\n        if (this.weekday === 0 && dow !== 0) {\r\n          this.weekday = 7\r\n        }\r\n\r\n        this.d -= dow\r\n        this.d += this.weekday\r\n      } else {\r\n        var diff = this.weekday - dow\r\n\r\n        // some PHP magic\r\n        if ((this.rd < 0 && diff < 0) || (this.rd >= 0 && diff <= -this.weekdayBehavior)) {\r\n          diff += 7\r\n        }\r\n\r\n        if (this.weekday >= 0) {\r\n          this.d += diff\r\n        } else {\r\n          this.d -= (7 - (Math.abs(this.weekday) - dow))\r\n        }\r\n\r\n        this.weekday = NaN\r\n      }\r\n    }\r\n\r\n    // adjust relative\r\n    this.y += this.ry\r\n    this.m += this.rm\r\n    this.d += this.rd\r\n\r\n    this.h += this.rh\r\n    this.i += this.ri\r\n    this.s += this.rs\r\n    this.f += this.rf\r\n\r\n    this.ry = this.rm = this.rd = 0\r\n    this.rh = this.ri = this.rs = this.rf = 0\r\n\r\n    let result = new Date(relativeTo.getTime())\r\n    // since Date constructor treats years <= 99 as 1900+\r\n    // it can't be used, thus this weird way\r\n    result.setFullYear(this.y, this.m, this.d)\r\n    result.setHours(this.h, this.i, this.s, this.f)\r\n\r\n    // note: this is done twice in PHP\r\n    // early when processing special relatives\r\n    // and late\r\n    // todo: check if the logic can be reduced\r\n    // to just one time action\r\n    switch (this.firstOrLastDayOfMonth) {\r\n      case 1:\r\n        result.setDate(1)\r\n        break\r\n      case -1:\r\n        result.setMonth(result.getMonth() + 1, 0)\r\n        break\r\n    }\r\n\r\n    // adjust timezone\r\n    if (!isNaN(this.z) && result.getTimezoneOffset() !== this.z) {\r\n      result.setUTCFullYear(\r\n        result.getFullYear(),\r\n        result.getMonth(),\r\n        result.getDate())\r\n\r\n      result.setUTCHours(\r\n        result.getHours(),\r\n        result.getMinutes() + this.z,\r\n        result.getSeconds(),\r\n        result.getMilliseconds())\r\n    }\r\n\r\n    return result\r\n  }\r\n}\r\n\r\nmodule.exports = function strtotime (str, now) {\r\n  //       discuss at: https://locutus.io/php/strtotime/\r\n  //      original by: Caio Ariede (https://caioariede.com)\r\n  //      improved by: Kevin van Zonneveld (https://kvz.io)\r\n  //      improved by: Caio Ariede (https://caioariede.com)\r\n  //      improved by: A. MatÃ­as Quezada (https://amatiasq.com)\r\n  //      improved by: preuter\r\n  //      improved by: Brett Zamir (https://brett-zamir.me)\r\n  //      improved by: Mirko Faber\r\n  //         input by: David\r\n  //      bugfixed by: Wagner B. Soares\r\n  //      bugfixed by: Artur Tchernychev\r\n  //      bugfixed by: Stephan BÃ¶sch-Plepelits (https://github.com/plepe)\r\n  // reimplemented by: RafaÅ‚ Kukawski\r\n  //           note 1: Examples all have a fixed timestamp to prevent\r\n  //           note 1: tests to fail because of variable time(zones)\r\n  //        example 1: strtotime('+1 day', 1129633200)\r\n  //        returns 1: 1129719600\r\n  //        example 2: strtotime('+1 week 2 days 4 hours 2 seconds', 1129633200)\r\n  //        returns 2: 1130425202\r\n  //        example 3: strtotime('last month', 1129633200)\r\n  //        returns 3: 1127041200\r\n  //        example 4: strtotime('2009-05-04 08:30:00+00')\r\n  //        returns 4: 1241425800\r\n  //        example 5: strtotime('2009-05-04 08:30:00+02:00')\r\n  //        returns 5: 1241418600\r\n\r\n  if (now == null) {\r\n    now = Math.floor(Date.now() / 1000)\r\n  }\r\n\r\n  // the rule order is important\r\n  // if multiple rules match, the longest match wins\r\n  // if multiple rules match the same string, the first match wins\r\n  const rules = [\r\n    formats.yesterday,\r\n    formats.now,\r\n    formats.noon,\r\n    formats.midnightOrToday,\r\n    formats.tomorrow,\r\n    formats.timestamp,\r\n    formats.firstOrLastDay,\r\n    formats.backOrFrontOf,\r\n    // formats.weekdayOf, // not yet implemented\r\n    formats.timeTiny12,\r\n    formats.timeShort12,\r\n    formats.timeLong12,\r\n    formats.mssqltime,\r\n    formats.timeShort24,\r\n    formats.timeLong24,\r\n    formats.iso8601long,\r\n    formats.gnuNoColon,\r\n    formats.iso8601noColon,\r\n    formats.americanShort,\r\n    formats.american,\r\n    formats.iso8601date4,\r\n    formats.iso8601dateSlash,\r\n    formats.dateSlash,\r\n    formats.gnuDateShortOrIso8601date2,\r\n    formats.gnuDateShorter,\r\n    formats.dateFull,\r\n    formats.pointedDate4,\r\n    formats.pointedDate2,\r\n    formats.dateNoDay,\r\n    formats.dateNoDayRev,\r\n    formats.dateTextual,\r\n    formats.dateNoYear,\r\n    formats.dateNoYearRev,\r\n    formats.dateNoColon,\r\n    formats.xmlRpc,\r\n    formats.xmlRpcNoColon,\r\n    formats.soap,\r\n    formats.wddx,\r\n    formats.exif,\r\n    formats.pgydotd,\r\n    formats.isoWeekDay,\r\n    formats.pgTextShort,\r\n    formats.pgTextReverse,\r\n    formats.clf,\r\n    formats.year4,\r\n    formats.ago,\r\n    formats.dayText,\r\n    formats.relativeTextWeek,\r\n    formats.relativeText,\r\n    formats.monthFullOrMonthAbbr,\r\n    formats.tzCorrection,\r\n    formats.dateShortWithTimeShort12,\r\n    formats.dateShortWithTimeLong12,\r\n    formats.dateShortWithTimeShort,\r\n    formats.dateShortWithTimeLong,\r\n    formats.relative,\r\n    formats.whitespace\r\n  ]\r\n\r\n  let result = Object.create(resultProto)\r\n\r\n  while (str.length) {\r\n    let longestMatch = null\r\n    let finalRule = null\r\n\r\n    for (let i = 0, l = rules.length; i < l; i++) {\r\n      const format = rules[i]\r\n\r\n      const match = str.match(format.regex)\r\n\r\n      if (match) {\r\n        if (!longestMatch || match[0].length > longestMatch[0].length) {\r\n          longestMatch = match\r\n          finalRule = format\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!finalRule || (finalRule.callback && finalRule.callback.apply(result, longestMatch) === false)) {\r\n      return false\r\n    }\r\n\r\n    str = str.substr(longestMatch[0].length)\r\n    finalRule = null\r\n    longestMatch = null\r\n  }\r\n\r\n  return Math.floor(result.toDate(new Date(now * 1000)) / 1000)\r\n}\r\n\n\n//# sourceURL=webpack://LIB/./src/strtotime.js?")},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__(/*! ./src/index.js */"./src/index.js");\n\n\n//# sourceURL=webpack://LIB/multi_./src/index.js?')}});const _LIB$datebob=LIB.datebob,_LIB$DateBob=LIB.DateBob;export{_LIB$datebob as datebob,_LIB$DateBob as DateBob};